// lib/widgets/onboarding/player_skills_section.dart import 'package:flutter/material.dart'; import '../../../theme/app_theme.dart'; import '../../../localization/app_strings.dart'; import '../../../theme/app_colors.dart';  class PlayerSkillsSection extends StatelessWidget {   final double speed;   final double headers;   final double defending;   final double passing;   final double scoring;   final double goalkeeping;   final ValueChanged<double> onSpeedChanged;   final ValueChanged<double> onHeadersChanged;   final ValueChanged<double> onDefendingChanged;   final ValueChanged<double> onPassingChanged;   final ValueChanged<double> onScoringChanged;   final ValueChanged<double> onGoalkeepingChanged;    const PlayerSkillsSection({     Key? key,     required this.speed,     required this.headers,     required this.defending,     required this.passing,     required this.scoring,     required this.goalkeeping,     required this.onSpeedChanged,     required this.onHeadersChanged,     required this.onDefendingChanged,     required this.onPassingChanged,     required this.onScoringChanged,     required this.onGoalkeepingChanged,   }) : super(key: key);    @override   Widget build(BuildContext context) {     final theme = Theme.of(context);          final skills = [       {'key': 'speed', 'label': AppStrings.get('skill_speed'), 'value': speed, 'onChange': onSpeedChanged},       {'key': 'headers', 'label': AppStrings.get('skill_headers'), 'value': headers, 'onChange': onHeadersChanged},       {'key': 'defending', 'label': AppStrings.get('skill_defending'), 'value': defending, 'onChange': onDefendingChanged},       {'key': 'passing', 'label': AppStrings.get('skill_passing'), 'value': passing, 'onChange': onPassingChanged},       {'key': 'scoring', 'label': AppStrings.get('skill_scoring'), 'value': scoring, 'onChange': onScoringChanged},       {'key': 'goalkeeping', 'label': AppStrings.get('skill_goalkeeping'), 'value': goalkeeping, 'onChange': onGoalkeepingChanged},     ];      return Column(       mainAxisSize: MainAxisSize.min,       crossAxisAlignment: CrossAxisAlignment.stretch,       children: skills.map((skill) => _buildSlider(         key: Key('skill_${skill['key']}'),         theme,         skill['label'] as String,         skill['value'] as double,         skill['onChange'] as ValueChanged<double>,       )).toList(),     );   }    Widget _buildSlider(     ThemeData theme,      String label,      double value,      ValueChanged<double> onChanged,      {Key? key}   ) {     return Column(       key: key,       mainAxisSize: MainAxisSize.min,       crossAxisAlignment: CrossAxisAlignment.stretch,       children: [         Padding(           padding: const EdgeInsets.only(top: ThemeConstants.xs),           child: Text(             label,             style: theme.textTheme.bodyLarge,           ),         ),         SizedBox(           height: 30,           child: Slider(             value: value,             min: 0,             max: 10,             divisions: 10,             label: value.round().toString(),             onChanged: onChanged,             activeColor: AppColors.playerColor,           ),         ),       ],     );   } }
