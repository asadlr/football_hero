// lib/widgets/onboarding/team_name_field.dart import 'package:flutter/material.dart'; import 'package:supabase_flutter/supabase_flutter.dart'; import '../../../theme/app_theme.dart'; import '../../../localization/app_strings.dart'; import '../../../theme/app_colors.dart'; import '../../../logger/logger.dart';  class TeamNameField extends StatelessWidget {   final TextEditingController teamNameController;   final bool isTeamValid;   final Function(bool) onTeamValidChanged;    const TeamNameField({     Key? key,     required this.teamNameController,     required this.isTeamValid,     required this.onTeamValidChanged,   }) : super(key: key);    @override   Widget build(BuildContext context) {     final theme = Theme.of(context);          return Column(       crossAxisAlignment: CrossAxisAlignment.start,       children: [         Text(           AppStrings.get('your_team_optional'),           style: theme.textTheme.bodyLarge,         ),         const SizedBox(height: ThemeConstants.sm),         Row(           children: [             Expanded(               child: Autocomplete<String>(                 optionsBuilder: (TextEditingValue textEditingValue) async {                   if (textEditingValue.text.isEmpty) {                     return const Iterable<String>.empty();                   }                    try {                     final response = await Supabase.instance.client                         .from('teams')                         .select('name')                         .ilike('name', '%${textEditingValue.text}%')                         .limit(10);                      final List<dynamic> data = response as List<dynamic>;                     return data.map<String>((team) => team['name'] as String);                   } catch (error) {                     AppLogger.error(message: 'Error fetching teams');                     return const Iterable<String>.empty();                   }                 },                 displayStringForOption: (String option) => option,                 onSelected: (String selection) {                   teamNameController.text = selection;                   onTeamValidChanged(true);                 },                 fieldViewBuilder: (                   BuildContext context,                   TextEditingController fieldController,                   FocusNode fieldFocusNode,                   VoidCallback onFieldSubmitted,                 ) {                   // Keep a reference to the autocomplete controller                   // This allows us to sync it with teamNameController                   if (fieldController.text != teamNameController.text) {                     fieldController.text = teamNameController.text;                   }                                      return TextFormField(                     key: const Key('team_name_field'),                     controller: fieldController,                     focusNode: fieldFocusNode,                     decoration: InputDecoration(                       labelText: AppStrings.get('team_name'),                       border: const OutlineInputBorder(),                       filled: true,                       fillColor: AppColors.background,                       contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),                       isDense: true,                     ),                     onChanged: (value) async {                       // Update our main controller                       teamNameController.text = value;                                              if (value.isEmpty) {                         onTeamValidChanged(true); // Empty is valid for optional field                         return;                       }                                              // Only validate if the text has a reasonable length                       if (value.length >= 3) {                         try {                           // Check if team exists with exact name match                           final exactMatch = await Supabase.instance.client                               .from('teams')                               .select('name')                               .eq('name', value)                               .limit(1);                                                      // If we get any results back, the team exists                           onTeamValidChanged(exactMatch != null && exactMatch.isNotEmpty);                         } catch (error) {                           AppLogger.error(message: 'Error validating team');                           onTeamValidChanged(false);                         }                       } else {                         onTeamValidChanged(false);                       }                     },                     validator: (value) {                       if (value?.isEmpty == true) {                         return null; // Optional field can be empty                       }                       if (!isTeamValid) {                         return AppStrings.get('select_team_from_list');                       }                       return null;                     },                   );                 },                 optionsViewBuilder: (                   BuildContext context,                   AutocompleteOnSelected<String> onSelected,                   Iterable<String> options,                 ) {                   return Align(                     alignment: Alignment.topRight,                     child: Material(                       elevation: 4.0,                       child: SizedBox(                         height: 200,                         width: MediaQuery.of(context).size.width - 74,                         child: ListView.builder(                           padding: EdgeInsets.zero,                           itemCount: options.length,                           itemBuilder: (BuildContext context, int index) {                             final option = options.elementAt(index);                             return ListTile(                               title: Text(option),                               onTap: () {                                 onSelected(option);                               },                             );                           },                         ),                       ),                     ),                   );                 },               ),             ),           ],         ),         const SizedBox(height: 8),         Text(           AppStrings.get('leave_empty_if_no_team'),           style: theme.textTheme.bodySmall,         ),       ],     );   } }
