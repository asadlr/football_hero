// lib/services/authentication_service.dart import 'package:supabase_flutter/supabase_flutter.dart'; import '../logger/logger.dart';  /// Service responsible for handling all authentication-related operations class AuthenticationService {   final SupabaseClient client;   final bool enableLogging;    AuthenticationService({     required this.client,      this.enableLogging = true,   });    /// Sign in with email and password   Future<AuthResponse> signIn({     required String email,      required String password,   }) async {     try {       if (enableLogging) {         AppLogger.info(message: 'Attempting to sign in user');       }              final response = await client.auth.signInWithPassword(         email: email,         password: password,       );              if (enableLogging) {         AppLogger.info(message: 'User signed in successfully');       }              return response;     } catch (e) {       if (enableLogging) {         AppLogger.error(message: 'Authentication failed: ${e.toString()}');       }       rethrow;     }   }    /// Sign up with email and password   Future<AuthResponse> signUp({     required String email,      required String password,     Map<String, dynamic>? userData,   }) async {     try {       if (enableLogging) {         AppLogger.info(message: 'Starting signup process');       }              final response = await client.auth.signUp(         email: email,         password: password,         data: userData ?? {           'timestamp': DateTime.now().toIso8601String(),           'registration_source': 'app_signup',         },       );              if (response.user != null) {         if (enableLogging) {           AppLogger.info(message: 'User created successfully');         }       } else {         if (enableLogging) {           AppLogger.warning(message: 'Signup completed but no user returned');         }       }              return response;     } catch (e) {       if (enableLogging) {         AppLogger.error(message: 'Registration failed: ${e.toString()}');       }       rethrow;     }   }    /// Password reset request   Future<void> resetPassword({required String email}) async {     try {       if (enableLogging) {         AppLogger.info(message: 'Requesting password reset for: $email');       }              await client.auth.resetPasswordForEmail(email);              if (enableLogging) {         AppLogger.info(message: 'Password reset email sent');       }     } catch (e) {       if (enableLogging) {         AppLogger.error(message: 'Password reset failed: ${e.toString()}');       }       rethrow;     }   }    /// Sign out current user   Future<void> signOut() async {     try {       if (enableLogging) {         AppLogger.info(message: 'Signing out user');       }              await client.auth.signOut();              if (enableLogging) {         AppLogger.info(message: 'User signed out successfully');       }     } catch (e) {       if (enableLogging) {         AppLogger.error(message: 'Sign out failed: ${e.toString()}');       }       rethrow;     }   }    /// Get current user   User? getCurrentUser() {     return client.auth.currentUser;   }    /// Check if user is authenticated   bool isAuthenticated() {     return client.auth.currentUser != null;   } }
