name: PR Validation
on:
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    
jobs:
  validate:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper analysis
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed . || true
      
      - name: Analyze project source
        continue-on-error: true
        run: flutter analyze
      
      - name: Check for dependency issues
        continue-on-error: true
        run: flutter pub outdated
      
      - name: Check for large files
        run: |
          find . -type f -not -path "*/\.*" -not -path "*/build/*" -size +10M > large_files.txt || true
          if [ -s large_files.txt ]; then
            echo "Warning: Large files detected:"
            cat large_files.txt
          fi

  security_scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Run dependency vulnerability scan
        continue-on-error: true
        run: |
          dart pub global activate dependency_validator
          dart pub global run dependency_validator:dependency_validator || true

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'
          cache: true
      
      - name: Create .env file
        run: |
          mkdir -p assets
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" > assets/.env
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> assets/.env
          echo "ENV=test" >> assets/.env
          echo "LOG_INFO=true" >> assets/.env
          echo "LOG_WARNING=true" >> assets/.env
          echo "LOG_ERROR=true" >> assets/.env
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Run all tests
        continue-on-error: true
        run: flutter test --coverage
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 5

  performance:
    name: Performance Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2'
          channel: 'stable'
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Check build performance
        run: |
          mkdir -p performance
          flutter build apk --debug --performance-measurement-file=performance/performance.json
      
      - name: Upload performance metrics
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-metrics
          path: performance/
          retention-days: 5
